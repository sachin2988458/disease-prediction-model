# -*- coding: utf-8 -*-
"""4_DISEASE PREDICTION MODEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10oo3WEc7myv44mggK9xU4o8ZlxJ1TJm8
"""

# STEP 1: Import Libraries
import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, roc_curve, roc_auc_score
import matplotlib.pyplot as plt

# STEP 2: Load Dataset (Breast Cancer dataset from sklearn)
data = load_breast_cancer()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target)  # 0 = malignant (disease), 1 = benign (no disease)

print("ðŸ”Ž Dataset Preview:")
print(X.head())
print("\nTarget Distribution:\n", y.value_counts())

# STEP 3: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# STEP 4: Feature Scaling (important for SVM, Logistic Regression)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# STEP 5: Define Models
models = {
    "Logistic Regression": LogisticRegression(max_iter=500),
    "Support Vector Machine": SVC(probability=True),  # probability=True needed for ROC curve
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "XGBoost": XGBClassifier(eval_metric='logloss', use_label_encoder=False, random_state=42)
}

# STEP 6: Train & Evaluate Models
results = {}

for name, model in models.items():
    # Train model
    if name in ["Logistic Regression", "Support Vector Machine"]:
        model.fit(X_train_scaled, y_train)
        y_pred = model.predict(X_test_scaled)
        y_prob = model.predict_proba(X_test_scaled)[:,1]
    else:
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        y_prob = model.predict_proba(X_test)[:,1]

    # Store evaluation metrics
    results[name] = {
        "Accuracy": accuracy_score(y_test, y_pred),
        "Precision": precision_score(y_test, y_pred),
        "Recall": recall_score(y_test, y_pred),
        "F1-Score": f1_score(y_test, y_pred),
        "ROC-AUC": roc_auc_score(y_test, y_prob)
    }

    # Print results
    print(f"\nðŸ“Š {name} Results")
    print(classification_report(y_test, y_pred))

# STEP 7: Compare Model Performance
results_df = pd.DataFrame(results).T
print("\nâœ… Model Comparison Table:")
print(results_df)

# STEP 8: Plot ROC Curves
plt.figure(figsize=(8,6))

for name, model in models.items():
    if name in ["Logistic Regression", "Support Vector Machine"]:
        y_prob = model.predict_proba(X_test_scaled)[:,1]
    else:
        y_prob = model.predict_proba(X_test)[:,1]
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.plot(fpr, tpr, label=f"{name} (AUC={roc_auc_score(y_test, y_prob):.2f})")

plt.plot([0,1],[0,1],'--',color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curves - Disease Prediction')
plt.legend()
plt.show()

